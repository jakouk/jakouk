---
layout: post
title:  "RxSwift 1"
date:   2017-11-18 22:39:20
author: Jakouk
categories: RxSwift
---

# RxSwift 1

#### 고대의 프로그래밍

* Data 1 = Program 1

#### 중간의 프로그래밍
* Data N = Program 1 -> 추상화를 하게 되었다. ( Abstract, OOP 등등 )

#### 현재의 프로그래밍 
* 동시성을 생각해야하는 프로그래밍 ( 여러개의 쓰레드를 사용함 )

	- ##### 문제점 
	
		* side Effect가 일어남. ( 하나의 데이터를 공유하면서 문제가 일어남 )
		* 하나의 프로그램이 다른 프로그램에 영향을 미치는것 ( 부수효과, 외부효과 )

	- ##### 해결방법 
	
		* let 등을 사용해서 데이터 공유를 막음.
		* 샌드박스 구조를 통해서 
		* keyChain을 통해 공유, sdk등을 사용해서 공유 등등

***
#### 함수형 프로그래밍

* 순수함수 
	 - 스코프 밖에것을 건드리지 않음
	 
* 참조 투명성 
 	- 입력이 같으면 결과가 같아야함 
* 일급객체 
 	- 함수의 인자로 보내고, 리턴으로도 보내고, 변수처럼 저장도 해야함


#### 언어 패러다임
- ##### 함수형 언어
	* 동작에 집중
	* 커링, 재귀함수등의 기법 사용.

- ##### 명령형/ 객체지향

- ##### 논리형 언어 
	* 참/ 거짓에 집중 

#### 함수를 만들때 가장 중요한것 

 - 무엇을 받아서 무엇을 리턴한 것인가
	```swift
	func fucntion(some Something) -> Something { }
	```
- 비동기 작업 문제 
	```swift
	func getImage(url: URL?) -> UIImage?
	```
***	
### RxSwift
- RX: Reactive Extension ( 반응형 확장 )

#### 반응형 프로그래밍
```swift
    var a = 10
    var b = 20
    var c = a + b
    
    a = 100
```

#### rx 용어
 - Observer
 - Obervable
 - Emit
 - Subscriber
 - Subscribe
 - Dispose

##### Observer
- 관찰자


##### Observable
- 관찰
```swift
	func getImage(url: URL?) -> Observable<UIImage>
```

#### Bind
 - 무언가 선과 선을 연결해서 데이터를 전달하는 것

#### 요약
* 우리는 동시성 시대를 살고 있다.
* 함수형 프로그래밍은 도시성 문제를 잘 해결해준다.
* 순수함수로 비동기를 처리하기 위해서 RxSwift를 사용한다.
* 반응형 프로그래밍은 비동기적이다.
* RxSwift는 반응형 프로그래밍이며, 함수형 프로그래밍이다.

#### 참조 
- [ReactiveX](http://reactivex.io)
- [Rxmarbles](http://rxmarbles.com)
