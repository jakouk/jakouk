---
layout: post
title:  "Generic ( 제네릭 )"
date:   2017-11-27 17:16:20
author: Jakouk
categories: Swift
---

## Generic

#### Generic ( 제네릭 )
- 제네릭을 사용해 코드를 구현하면 어떤 타입에도 유연하게 대응할 수 있다. 또한 제네릭으로 구현한 기능과 타입은 재사용하기에도 쉽다. 

#### 제네릭 기본 문법
```swift
 제네릭을 사용하고자 하는 타입 이름 < 타입 매개변수 >
 제네릭을 사용하고자 하는 함수 이름 < 타입 매개변수 > ( 함수의 매개변수 )
```

#### 제네릭으로 만든 Swap함수 , Stack 
Swap 함수 
```swift
func swap<T> (_ a: inout T, _ b: inout T) {
  let temporaryA: T = a
  print("temporaryA = \(temporaryA)")
  a = b
  a = temporaryA
}
```
* swap 함수의 T는 플레이스홀더 라고 하며 그냥 어떤 타입 이라는 의미이다. 
* 여러타입을 사용 하려면 <T, U, V> 처럼 부등호 안쪽에 여러개의 타입 매개변수를 지정해 주면 된다 .
* T, U, V 같은 의미 없는 이름을 사용할수도 있지만 ```Array <Element>, Dictionary<Key, Value>``` 같은 의미있는 이름으로 사용하는 것이 좋다. 
* 타입 매개변수 이름은 대문자 카멜케이스를 사용하여 표현한다. 

Stack 함수 
```swift 
struct Stack<Element> {
  var items = [Element]()
  mutating func push(_ item: Element) {
    items.append(item)
  }
  mutating func pop() -> Element {
  
  }
```
***

#### 제네릭 타입 확장
 - 익스텐션을 통해 제네릭을 사용하는 타입에 기능을 추가하고자 한다면 익스텐션 정의에 타입 매개변수를 명시하지 않습니다.

```swift
extension Stack {
  var topElement: Element? {
    return self.items.last
  }
}

print(doubleStack.topElement) // Optional(1.0)
print(stringStack.topElement) // Optional("1")
print(anyStack.topElement) // Optional("2")
```
***

#### 타입 제약 ( Type Constraints )

- 매개변수에 특정 프로토콜을 따르는 타입이나 클래스 타입으로 타입 제약을 줄수 있다. 

잘못된 substractTwoValue
```swift 
// - 연산자를 사용할수 있는 타입으로 매개변수를 제한해야 한다. 
func substractTwoValue<T>(_ a: T, _ b: T) -> T {
  return a - b
}
```
substractTwoValue
```swift
func substractTwoValue<T: Integer>(_ a: T, _ b: T) -> T {
  return a - b 
}
```
- Integer 프로토콜을 따르게 타입 제약을 주었다. 


